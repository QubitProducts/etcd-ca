package cmd

import (
	"fmt"
	"os"

	"github.com/coreos/etcd-ca/third_party/github.com/codegangsta/cli"

	"github.com/coreos/etcd-ca/depot"
	"github.com/coreos/etcd-ca/pkix"
)

func NewNewCertCommand() cli.Command {
	return cli.Command{
		Name:        "new-cert",
		Usage:       "Create certificate request for host",
		Description: "Create certificate for host, including certificate signing request and key. Certificate could be generated by signing the request.",
		Action:      newCertAction,
	}
}

func newCertAction(c *cli.Context) {
	if len(c.Args()) != 1 {
		fmt.Fprintln(os.Stderr, "One host name must be provided.")
		os.Exit(1)
	}
	name := c.Args()[0]

	if depot.CheckCertificateSigningRequest(d, name) || depot.CheckPrivateKeyHost(d, name) {
		fmt.Fprintln(os.Stderr, "Certificate request has existed!")
		os.Exit(1)
	}

	key, err := pkix.CreateRSAKey()
	if err != nil {
		fmt.Fprintln(os.Stderr, "Created RSA Key error:", err)
		os.Exit(1)
	} else {
		fmt.Printf("Created %s/key\n", name)
	}

	csr, err := pkix.CreateCertificateSigningRequest(key, name)
	if err != nil {
		fmt.Fprintln(os.Stderr, "Created certificate request error:", err)
		os.Exit(1)
	} else {
		fmt.Printf("Created %s/crt\n", name)
	}

	if err = depot.PutCertificateSigningRequest(d, name, csr); err != nil {
		fmt.Fprintln(os.Stderr, "Saved certificate request error:", err)
	}
	if err = depot.PutPrivateKeyHost(d, name, key); err != nil {
		fmt.Fprintln(os.Stderr, "Saved key error:", err)
	}
}
